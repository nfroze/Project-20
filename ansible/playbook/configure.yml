---
- name: Configure instances
  hosts: all
  become: yes
  gather_facts: yes
  
  tasks:
    - name: Update package cache (Debian/Ubuntu)
      apt:
        update_cache: yes
      when: ansible_os_family == "Debian"
    
    - name: Update package cache (RedHat/Amazon)
      yum:
        update_cache: yes
      when: ansible_os_family == "RedHat"
    
    - name: Install nginx
      package:
        name: nginx
        state: present
    
    - name: Create web directory
      file:
        path: /var/www/p20
        state: directory
        mode: '0755'
    
    - name: Deploy web page
      template:
        src: ../templates/index.html.j2
        dest: /var/www/p20/index.html
        mode: '0644'
    
    - name: Configure nginx site
      copy:
        content: |
          server {
              listen 80 default_server;
              server_name _;
              
              root /var/www/p20;
              index index.html;
              
              location / {
                  try_files $uri $uri/ =404;
              }
              
              location /health {
                  default_type application/json;
                  return 200 '{"status":"healthy","provider":"{{ cloud_provider }}"}';
              }
              
              location /nginx_status {
                  stub_status on;
                  access_log off;
                  allow 127.0.0.1;
                  deny all;
              }
          }
        dest: "{{ '/etc/nginx/sites-available/default' if ansible_os_family == 'Debian' else '/etc/nginx/conf.d/default.conf' }}"
      notify: restart nginx
    
    - name: Ensure nginx is started
      systemd:
        name: nginx
        state: started
        enabled: yes
    
    - name: Remove existing Datadog agent if present
      package:
        name: datadog-agent
        state: absent
      ignore_errors: yes
      when: datadog_api_key is defined
    
    - name: Clean Datadog configuration
      file:
        path: /etc/datadog-agent
        state: absent
      when: datadog_api_key is defined
    
    - name: Set Datadog environment variables for Azure
      copy:
        content: |
          DD_CLOUD_PROVIDER_METADATA="azure"
        dest: /etc/default/datadog-agent
        mode: '0644'
      when: datadog_api_key is defined and cloud_provider == "Azure"
    
    - name: Set Datadog environment variables for GCP
      copy:
        content: |
          DD_CLOUD_PROVIDER_METADATA="gcp"
          DD_GCE_METADATA_TIMEOUT=10
        dest: /etc/default/datadog-agent
        mode: '0644'
      when: datadog_api_key is defined and cloud_provider == "GCP"
    
    - name: Install Datadog Agent fresh
      shell: |
        DD_API_KEY="{{ datadog_api_key }}" \
        DD_SITE="datadoghq.eu" \
        bash -c "$(curl -L https://s3.amazonaws.com/dd-agent/scripts/install_script_agent7.sh)"
      when: datadog_api_key is defined
    
    - name: Configure cloud detection for Azure
      blockinfile:
        path: /etc/datadog-agent/datadog.yaml
        block: |
          cloud_provider_metadata:
            - azure
          collect_instance_metadata: true
        marker: "# {mark} ANSIBLE CLOUD CONFIG"
      when: datadog_api_key is defined and cloud_provider == "Azure"
    
    - name: Configure cloud detection for GCP
      blockinfile:
        path: /etc/datadog-agent/datadog.yaml
        block: |
          cloud_provider_metadata:
            - gcp
          gce_metadata_timeout: 10
          collect_instance_metadata: true
        marker: "# {mark} ANSIBLE CLOUD CONFIG"
      when: datadog_api_key is defined and cloud_provider == "GCP"
    
    - name: Configure Datadog nginx monitoring
      copy:
        content: |
          init_config:
          instances:
            - nginx_status_url: http://localhost/nginx_status
        dest: /etc/datadog-agent/conf.d/nginx.d/conf.yaml
        owner: dd-agent
        group: dd-agent
      when: datadog_api_key is defined
      notify: restart datadog
    
    - name: Restart Datadog to apply config
      systemd:
        name: datadog-agent
        state: restarted
      when: datadog_api_key is defined
  
  handlers:
    - name: restart nginx
      systemd:
        name: nginx
        state: restarted
    
    - name: restart datadog
      systemd:
        name: datadog-agent
        state: restarted